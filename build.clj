;; build.clj — build tasks using tools.build
(ns build
  "Build script to generate real-time quantiles service uberjar."
  {:gen-class true}
  (:require [clojure.tools.build.api :as b]))

;; --------------------------------------------------
;; General settings
;; --------------------------------------------------
(def lib 'quantile-service)
(def version "0.1.0")
(def class-dir "target/classes")
(def basis    (b/create-basis {:project "deps.edn"}))
(def jar-file (format "target/%s-%s.jar" (name lib) version))

;; --------------------------------------------------
;; Directory cleaning
;; --------------------------------------------------
(defn clean
  "Remove the entire target folder for a clean build." [opts]
  (println "Cleaning target directory...")
  (b/delete {:path "target"}))

;; --------------------------------------------------
;; Code compilation
;; --------------------------------------------------
(defn compile
  "Compile Java gRPC stubs, copies resources, and Clojure compiles."
  [_]
  ;; 1) generate .class of stubs in src/quantile/... generated by protoc
  (println "❏ Compiling Java gRPC stubs…")
  (b/javac {:basis     basis
            :src-dirs  ["src"]
            :class-dir class-dir})

  ;; 2) copy static resources (if any)
  (println "❏ Copying resources…")
  (b/copy-dir {:src-dirs   ["resources"]
               :target-dir class-dir})

  ;; 3) compile Clojure namespaces
  (println "❏ Compiling Clojure namespaces…")
  (b/compile-clj {:basis     basis
                  :src-dirs  ["src"]
                  :class-dir class-dir
                  :ns-compile ['quantile-service.core]}))

;; --------------------------------------------------
;; uberjar generation
;; --------------------------------------------------
(defn uber
  "Generate a uberjar in target/ from class-dir and deps.edn." [opts]
  (clean nil)
  (compile nil)
  (println "Building uberjar: " jar-file)
  (b/uber {:class-dir class-dir
           :uber-file jar-file
           :basis     basis
           :main      'quantile-service.core})
  (println "Uberjar generated in" jar-file))

;; --------------------------------------------------
;; Standard input for clj -Tbuild <fn>
;; --------------------------------------------------
(comment
  ;; To run via CLI:
  ;; clj -T:build clean
  ;; clj -T:build compile
  ;; clj -T:build uber
)
